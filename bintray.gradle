/*
 * Copyright (c) Joaquim Ley 2016. All Rights Reserved.
 * <p/>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p/>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p/>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Gradle script for uploading your own library to jcenter()
 *
 * Make a copy of the deploy.properties template:
 * https://github.com/JoaquimLey/jcenter-config/deploy.properties
 *
 * Run with: ./gradlew :moduleName bintrayUpload
 *
 * More info: https://github.com/JoaquimLey/jcenter-config
 */
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

version = libraryVersion

ext {
    bintrayRepo = 'extension'
    bintrayName = 'com.extension'

    publishedGroupId = 'com.extension'
    libraryName = 'extension-extension'
    artifact = 'extension'

    libraryDescription = 'Extension functions'

    siteUrl = 'https://github.com/amitsahni/extension'
    gitUrl = 'https://github.com/amitsahni/extension.git'

    libraryVersion = '0.0.1-alpha'

    developerId = 'amitsahni'
    developerName = 'Amit Singh'
    developerEmail = 'sahni1987@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging properties.getProperty('pomPackaging')
                name properties.getProperty('pomName')
                description properties.getProperty('pomName')
                artifactId properties.getProperty('pomArtifactId')
                url properties.getProperty('websiteUrl')
                licenses {
                    license {
                        name properties.getProperty('pomLicenseName')
                        url properties.getProperty('pomLicenseUrl')
                    }
                }
                developers {
                    developer {
                        id properties.getProperty('pomDeveloperId')
                        name properties.getProperty('pomDeveloperName')
                        email properties.getProperty('pomDeveloperEmail')
                    }
                }
                scm {
                    connection properties.getProperty('vcsUrl')
                    developerConnection properties.getProperty('vcsUrl')
                    url properties.getProperty('websiteUrl')

                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

task findConventions << {
    println project.getConvention()
}